#!/usr/bin/env perl

use strict;
use warnings;
use 5.010;
use Bio::AlignIO;
use Bio::SimpleAlign;
use Bio::LocatableSeq;
use Getopt::Long qw(:config gnu_getopt);
use Pod::Usage;

################################################################################
# Option parsing
################################################################################
my %opts;
GetOptions(
    \%opts,
    "help|h",
    "man",
    "match|m",
    "input|i=s",
    "output|o=s",
    "slice|s=s",
    "num|n",
    "uniq|u",
    "length|l",
    "pick|p=s",
    "del|d=s",
    "rsample|e:i",    # Optional value, default is floor of num_sequences/2
    "ref|r=s",
    "consensus|c:50",
    "codon-view|b:20",    # Optional value, default 20
    "nogaps|g",
    "inform|q",
    "avgpercentid|t",
    "window|w:30",
    "var|v"
) or pod2usage(2);

pod2usage(1) if $opts{"help"};
pod2usage( -exitstatus => 0, -verbose => 2 ) if $opts{"man"};

################################################################################
# Main
################################################################################

# This is the format that aln-manipulations expects by default
my $default_format = "clustalw";

my $file = shift
    || "STDIN";    # If no more arguments were given on the command line,

# assume we're getting input from standard input

my $in_format = $opts{"input"} || $default_format;

my $in = Bio::AlignIO->new(
    -format => $in_format,
    ( $file eq "STDIN" )
    ? ( -fh => \*STDIN )
    : ( -file => $file )
);

my $aln = $in->next_aln();

# Avoid unnecessarily opening an output file.
#### Options which *do not require opening an output FH* go here ####
if ( $opts{"length"} ) {
    say $aln->length();
    exit;
}

if ( $opts{"num"} ) {
    say $aln->num_sequences();
    exit;
}

if ( $opts{"avgpercentid"} ) {
    say $aln->average_percentage_identity();
    exit;
}

if ( $opts{"window"} ) {    # average identity by windows, default to 30
    avg_id_by_win();
    exit;
}

#### Options which *require an output FH* go *after* this ####
my $out_format = $opts{"output"} || $default_format;
my $out = Bio::AlignIO->new( -format => $out_format, -fh => \*STDOUT );

get_consensus()
    if ( $opts{"consensus"} );

$aln = $aln->set_new_reference( $opts{"ref"} )
    if ( $opts{"ref"} );

if ( $opts{"uniq"} ) {
    $aln->verbose(1);
    $aln = $aln->uniq_seq();
}

del_seqs()
    if ( $opts{"del"} );

pick_seqs()
    if ( $opts{"pick"} );

aln_slice()
    if ( $opts{"slice"} );

extract_sites()
    if ( $opts{"var"} || $opts{"nogaps"} );

$aln->match()
    if ( $opts{"match"} );

sample_seqs()
    if ( defined( $opts{"rsample"} ) );    # defined since default value is 0

# if ( !( defined $opts{"var"} ) && ( defined $opts{"nogaps"} ) ) {
#     my $new_aln = new Bio::SimpleAlign();
#     my $length  = $aln->length();
#     my $ntax    = $aln->num_sequences();
#     my $flags   = flag_sites($length);
#
#     print STDERR "Gap sites:\n";
#     extract_sites( $new_aln, $length, $ntax, $flags );
#
#     $aln = $new_aln;
# }

if ( $opts{"codon-view"} ) {
    draw_codon_view($aln);
}

# Past this point, $new_aln is assumed to be initialized
# by some option. Check if it is, and if not, set it to
# be equal to $aln
#$new_aln = $aln if ( !$new_aln );

$aln->set_displayname_flat();
$out->write_aln($aln);

exit;

################################################################################
# Subroutines
################################################################################
sub get_consensus {
    my $percent_threshold = $opts{"consensus"};
    my $consense          = Bio::LocatableSeq->new(
        -seq   => $aln->consensus_string($percent_threshold),
        -id    => "Consensus_$percent_threshold",
        -start => 1,
        -end   => $aln->length()
    );
    $aln->add_seq($consense);
}

# Function: _del_or_pick
# Desc: Internal function. Generic code for either picking or deleting a
#  sequence from an alignment. Used by del_seqs and pick_seqs.
# Input:
#   $id_list, a user-supplied string consisting of comma-separated seq id values
#   $method, the name of the Bio::SimpleAlign method to use (remove_seq or add_seq)
#   $need_new, a flag indicating whether a new Bio::SimpleAlign object is needed
# Returns: Nothing; uses the $aln global variable
sub _del_or_pick {
    my ( $id_list, $method, $need_new ) = @_;
    my $new_aln
        = ($need_new)
        ? Bio::SimpleAlign->new()
        : $aln;

    my @selected = split( /\s*,\s*/, $id_list );
    foreach my $seq ( $aln->each_seq ) {
        my $seqid = $seq->display_id();
        foreach my $id (@selected) {
            next unless $seqid eq $id;
            $new_aln->$method($seq);
        }
    }
    $aln = $new_aln if ( $need_new == 1 );
}

sub del_seqs {
    _del_or_pick( $opts{"del"}, "remove_seq", 0 );
}

sub pick_seqs {
    _del_or_pick( $opts{"pick"}, "add_seq", 1 );
}

sub aln_slice {    # get alignment slice
    my ( $begin, $end ) = split( /\s*,\s*/, $opts{"slice"} );

    # Allow for one parameter to be omitted. Default $begin to the
    # beginning of the alignment, and $end to the end.
    $begin = 1            if ( $begin eq "-" );
    $end   = $aln->length if ( $end   eq "-" );
    $aln = $aln->slice( $begin, $end );
}

sub avg_id_by_win {
    my $window_sz = $opts{"window"};

    for my $i ( 1 .. ( $aln->length() - $window_sz + 1 ) ) {
        my $slice = $aln->slice( $i, $i + $window_sz - 1 );
        my $pi = ( 100 - $slice->average_percentage_identity() ) / 100;
        printf "%d\t%d\t%.4f\n", $i, $i + $window_sz - 1, $pi;
    }
}

sub column_status {
    my %count;
    my $ref   = shift;
    my @array = @$ref;
    my $st    = {
        gap         => 0,
        informative => 1,
        constant    => 1
    };

    foreach my $char (@array) {
        $count{$char}++;
        $st->{gap} = 1 if $char =~ /[\-\?]/;
    }

    my @keys = keys %count;

    foreach my $ct ( values %count ) {
        if ( $ct < 2 ) {
            $st->{informative} = 0;    # including gap
            last;
        }
    }

    if ( @keys > 1 ) {                 # variable (including gaps)
        $st->{constant} = 0;
    }

    return $st;
}

sub cal_A {
    my $num = shift;
    my $A   = 0;

    for my $i ( 1 .. $num - 1 ) {
        $A += 1 / $i;
    }

    return $A;
}

sub extract_sites {
    my $new_aln = new Bio::SimpleAlign();
    my $length  = $aln->length();
    my $ntax    = $aln->num_sequences();
    my $flags   = flag_sites($length);
    my $gaps_only
        = ( defined( $opts{"nogaps"} ) && !defined( $opts{"var"} ) );
    my $msg = ($gaps_only) ? "Gap" : "Variable";

    warn "$msg sites:\n";

    # Produce consistent output: If option nogaps is given, we print
    # the list of gap sites, but the alignment has them *removed*.
    my $keep_bit = ($gaps_only)
        ? "0"     # If removing gaps and not extracting variable sites
        : "1";    # If extracting variable sites.

    # Print the gap or variable site (wherever the flag is '1')
    for ( my $i = 0; $i < $length; $i++ ) {
        print STDERR $i + 1, "\t" if substr( $flags, $i, 1 );
    }

    print STDERR "\n";
    for ( my $i = 1; $i <= $ntax; $i++ ) {    # extract variable sites
        my $seq     = $aln->get_seq_by_pos($i);
        my $id      = $seq->display_id;
        my $seq_str = $seq->seq();

# Use $flag_str as a mask to avoid looping and calling Bio::Seq->substr() each time
        $seq_str
            =~ s/(.)/substr($flags, pos $seq_str, 1) eq $keep_bit ? $1 : ''/eg;

       # Read: For each character in $seq_str, if there is a $keep_bit in that
       # same position in the mask, then leave the character alone. Otherwise,
       # replace with '' (removing the char and truncating $seq_str).

        my $loc_seq = Bio::LocatableSeq->new(
            -seq   => $seq_str,
            -id    => $id,
            -start => 1
        );

        #### This is a workaround to some strange behavior:####
    # Let LocatableSeq::end calculate the appropriate end value. Then manually
    # set it so that other functions, like match(), do not break.
        my $end = $loc_seq->end;
        $loc_seq->end($end);

        #print Dumper ($loc_seq);
        $new_aln->add_seq($loc_seq);
    }

    $aln = $new_aln;
}

sub flag_sites {
    my $length = shift;
    my $flags;
    for ( my $i = 1; $i <= $length; $i++ ) {    # 2. flag the variable sites
        my @char = ();
        foreach my $seq ( $aln->each_seq ) {
            push @char, $seq->subseq( $i, $i );
        }

        my $status = column_status( \@char );

        # Omitting gaps, not interested in variable sites
        if ( $opts{"nogaps"} && !$opts{"var"} ) {
            if   ( $status->{gap} ) { $flags .= 1; }
            else                    { $flags .= 0; }
        }
        else {    # If extracting variable sites, but excluding gaps
            if ( $status->{gap} && $opts{"nogaps"} ) { $flags .= 0; }
            elsif ( $status->{constant} ) { $flags .= 0; }
            elsif ( !$status->{informative} && $opts{"inform"} ) {
                $flags .= 0;
            }
            else { $flags .= 1; }
        }
    }

    return $flags;
}

sub sample_seqs {

# If option was given with no number, take the integer part of num_sequences/2
# Its OK to use int() here (especially since we want to round towards 0)
    my $num_seqs = $aln->num_sequences;
    my $sample_size
        = ( $opts{"rsample"} == 0 ) ? int( $num_seqs / 2 ) : $opts{"rsample"};

    die
        "Error: sample size ($sample_size) exceeds number of sequences in alignment: ($num_seqs)"
        if ( $sample_size > $num_seqs );

    # Use Reservoir Sampling to pick random sequences.
    my @sampled = ( 1 .. $sample_size );
    for my $k ( $sample_size + 1 .. $num_seqs ) {
        $sampled[ rand(@sampled) ] = $k
            if ( rand() < ( $k / $sample_size ) );
    }

    warn "Sampled the following sequences: @sampled\n\n";
    my $tmp_aln = $aln->select_noncont(@sampled);
    $aln = $tmp_aln;
}

# For use in draw_codon_view
# Pad display ids with a minimum of 4 spaces using the longest display id
# as a reference point for length. Pass-by-reference, so don't return array.
# Return length of longest id plus padding.
sub pad_display_id {
    my $display_id = shift;
    my $max_len    = shift;

    my $padding = ( $max_len - length($display_id) );
    $display_id .= " " x $padding;

    return $display_id;
}

# Used by draw_codon_view. Calculates position of final position in alinged
# block, prints the current position there.
sub print_positions {
    my $nuc_count    = shift;
    my $aln_length   = shift;
    my $block_length = 3 * $opts{"codon-view"};
    my $max_id_len   = shift;
    my $num_spaces   = 0;

    my $start_pos = $nuc_count + 1;
    my $last_pos  = 0;
    my $offset    = 0;
    if ( ( $nuc_count + $block_length ) >= $aln_length ) {
        $last_pos = $aln_length;
        my $diff = $aln_length - $nuc_count;

        # $diff % 3 gives the number of extra non-codon nucleotides
        $offset = $diff + ($diff) / 3 + ( $diff % 3 ) - 2;
    }
    else {
        $last_pos = $nuc_count + $block_length;
        $offset = $block_length + ($block_length) / 3 - 2;
    }

    # -1 since we are also printing the starting position.
    $num_spaces += $offset - 1;

 # $last_pos_len = length of last_pos treated as a string (ie length(335) = 3)
    my $last_pos_len = length($last_pos);

    # Pad $start_pos with $num_blanks blanks if it is shorter than $last_pos
    my $num_blanks = $last_pos_len - length($start_pos);
    $start_pos = " " x $num_blanks . "$start_pos"
        if ( length($start_pos) < $last_pos_len );

    for ( my $i = 0; $i < $last_pos_len; $i++ ) {
        print " " x $max_id_len
            . substr( $start_pos, $i, 1 )
            . " " x ($num_spaces)
            . substr( $last_pos, $i, 1 ) . "\n";
    }
}

sub find_max_id_len {
    my $seqs = shift;
    my @sorted_by_length
        = sort { length $a->display_id <=> length $b->display_id } @$seqs;

    return length $sorted_by_length[-1]->display_id;
}

# Draw a CLUSTALW-like alignment to standard out. Strange formatting errors when
# alignment length not divisible by 3. Does not output an alignment in a
# traditional format.
sub draw_codon_view {
    my $aln = shift;

    # Is 20 by default. Blocks are measured in CODONS, so mult by 3
    my $block_length = 3 * $opts{"codon-view"};
    my $aln_length   = $aln->length();
    my $num_seqs     = $aln->num_sequences();
    my $min_pad = 4;    # Minimum padding between sequence and ID
    my $seq_matrix;
    my @seqs = ( $aln->each_seq );
    my @display_ids;

    # Find longest id length, add id/sequence padding
    my $max_id_len = find_max_id_len( \@seqs );

    # id length includes padding
    $max_id_len += $min_pad;

    # Extract display_ids and sequences from AlignIO object.
    foreach my $seq (@seqs) {
        my @seq_str = split '', $seq->seq();
        push @$seq_matrix, \@seq_str;
        push @display_ids, $seq->display_id;

       # Pad display ids so that space between them and sequence is consistent
        $display_ids[-1] = pad_display_id( $display_ids[-1], $max_id_len );
    }

    my $nuc_count = 0;

    # Loop over each sequence.
    for ( my $i = 0; $i < $num_seqs; $i++ ) {

        # Print count at end of block when we are starting out a new block
        if ( $i == 0 ) {
            print_positions( $nuc_count, $aln_length, $max_id_len );
        }

        # Loop over nucleotides
        for ( my $j = $nuc_count; $j < $aln_length; $j++ ) {

       # When we're starting, or starting a new block, print the display id's.
            print $display_ids[$i] if ( $j % $block_length == 0 );

            print "$$seq_matrix[$i]->[$j]";
            print " " if ( ( ( $j + 1 ) % 3 ) == 0 );

            # When we've reached the end of the alignment or a block
            if (   ( $j + 1 == $aln_length )
                || ( ( ( $j + 1 ) % $block_length ) == 0 ) )
            {

              # If this is the last sequence, save the ending (next) position.
                if ( $i + 1 == $num_seqs ) {
                    $nuc_count = $j + 1;
                }

                # Otherwise, start on the next line.
                else {
                    print "\n";
                }

                # In either case, need to exit this loop.
                last;
            }
        }    # END for LOOP OVER NUCLEOTIDES

     # Finish if we've reached the end of the alignment, and the last sequence
        if ( ( $i + 1 == $num_seqs ) && ( $nuc_count == $aln_length ) ) {
            print "\n";
            last;
        }

      # If we haven't reached the end of the alignment, but we've run through
      # all sequences, print final block position and start at first sequence.
        elsif ( ( $i + 1 == $num_seqs ) && ( $nuc_count < $aln_length ) ) {
            $i = -1
                ;  # Always increments after a loop; next increment sets to 0.
            print "\n\n";
        }
    }    # END for LOOP OVER SEQUENCES

  # Can't let script terminate normally: produces traditional alignment output
    exit 0;
}

################# POD Documentation ############

__END__

=head1 NAME

bioaln - Alignment tools based on BioPerl

=head1 SYNOPSIS

B<bioaln> [options] [alignment file]

=head1 DESCRIPTION

B<bioaln> will read an alignment file and 
do slice, display match characters, etc. By default, B<bioaln>
will assume both the input and the output are in clustalw format.

=head1 OPTIONS

=over 4

=item B<--help, -h>

Print a brief help message and exits.

=item B<--man>

Prints the manual page and exits.

=item B<--input, -i> 'format'

Input file format. By default, this is 'clustalw'.

=item B<--output, -o> 'format'

Output file format. By default, this is 'clustalw'.

=item B<--match, -m>

Go through all columns and change resudues identical to the reference sequence
to be the match character, '.'.

=item B<--slice, -s> 'min,max'
Get a slice of the alignment.

Using a '-' character in the first or second position defaults to the beginning or end, respectively.
Therefore specifying -s'-,-' is the same as grabbing the whole alignment.

 Examples:
 -s'20,80' or --slice'20,80' or -s='20,80' or --slice='20,80'	Slice from position 20 to 80, inclusive.
 -s'-,80'	Slice from beginning up to, and including position 80
 -s'20,-'	Slice from position 20 up to, and including, the end of the alignment

NOTE: --slice'-,x' (where x is '-' or a position) does NOT work. Use --slice='-,x' instead.

=item B<--num, -n>

Get number of sequences in alignment

=item B<--lengths, -l>

Print alignment length.

=item B<--pick, -p> 'seq_id_1, seq_id_2, ... , seq_id_n'

Pick sequences based on their id. Option takes a comma-separated list of ids. 

=item B<--del, -d> 'seq_id_1, seq_id_2, ... , seq_id_n'

Delete sequences based on their id. Option takes a comma-separated list of ids.

=item B<--rsample, -e> [n]

Picks n random sequences from input alignment and produces a new alignment
consisting of those sequences.

If n is not given, default is the number of sequences in alignment divided by 2,
rounded down.

This functionality uses an implementation of Reservoir Sampling, based on the
algorithm found here:
 http://blogs.msdn.com/b/spt/archive/2008/02/05/reservoir-sampling.aspx

=item B<--ref, -r> 'seq_id'

Change the reference sequence to be seq_id.

=item B<--consensus, -c> 'percent'

Add a consensus sequence to the end of the alignment with a certain threshold
percent and id Consensus_<percent>. By default percent is 50.

=item B<--codon-view, -b>

Prints a CLUSTALW-like alignment, but separated by codons. Intended for
use with DNA sequences. Block-final position numbers are printed at the end of
every alignment block at the pont of wrapping, and block-initial counts appear
over first nucleotide in a block.

If invoked as --codon-view=n where n is some number, will print n codons per
line. Other normally stackable options, such as -m, can be used along side it.
If piping through bioaln, ensure codon-view is used in the last
invocation.

=item B<--nogaps, -g>

B<Used in conjunction with -v:> do not show sites with gaps in any sequence.

B<Used alone:> extract sites with gaps.

=item B<--inform, -q>

Show only informative sites. Used in conjunction with -v.

=item B<--avgpercentid, -t>

Calculate the average percent identity of an alignment. Returns the value alone.

=item B<--uniq, -u>

Extract unique sequence types (STs)

=item B<--window, -w> 'window_size'

Calculate pairwise average sequence difference by windows (overlapping windows
with fixed step of 1). Default value for window_size is 30.

=item B<--var, -v>

Extract variable sites.

=back

=head1 EXAMPLES

Section under construction...

=head1 REQUIRES

  Perl 5.100, Modern::Perl, BioPerl

=head1 SEE ALSO

  perl(1)

=head1 AUTHOR

Weigang Qiu at genectr.hunter.cuny.edu
William McCaig
Yözen Hernández yzhernand at gmail dot com
Levy Vargas levy dot vargas at gmail dot com

=cut

##################### End ##########################







