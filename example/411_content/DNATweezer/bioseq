#!/usr/bin/env perl

use strict;    # Still on 5.10, so need this for strict
use warnings;
use FindBin;                      # Find the location of seq-manipulations
use lib "$FindBin::Bin/lib";          # to use it as a lib path
require "SeqManipulations.pm";    # to get this library!
use 5.010;
use Getopt::Long qw(:config gnu_getopt);
use Pod::Usage;

################################################################################
# Option parsing
################################################################################
my %opts;
GetOptions(
    \%opts,
    "help|h",
    "man|m",
    "input|i=s",
    "output|o=s",
    "sub|s=s",
    "lengths|l",
    "pick|p=s",
    "del|d=s",
    "revcom|r",
    "translate|t=i",
    "noseq|n",
    "shred|c",
    "linearize|L",
    "extract|e",
    "nogaps|g",
    "longest-orf|C",
    "anonymize|a:10",    # default 10 char (for phylip) (prefix + num_digits)
    "prefix=s",
    "composition|w"
) or pod2usage(2);

pod2usage(1) if $opts{"help"};
pod2usage( -exitstatus => 0, -verbose => 2 ) if $opts{"man"};

################################################################################
# Main
################################################################################

# This sets all internal variables, and loads SeqIO objects
initialize( \%opts );

for my $option ( keys %opts ) {

    # Don't process these options: they are for SeqIO
    next if ( ( $option eq 'input' ) || ( $option eq 'output' ) );

    # If there is a function to handle the current option, execute it
    if ( can_handle($option) ) {
        handle_opt($option);
        exit;
    }
    else {
        warn "Missing handler for: $option\n";
    }
}

# Let seq-manipulations act as a converter when no other options are given.
write_out();

################# POD Documentation ##################

__END__

=head1 NAME

bioseq - Fasta tools based on BioPerl

=head1 SYNOPSIS

B<bioseq> [options] [sequence file]

=head1 DESCRIPTION

B<bioseq> will read a sequenece file and do reformating, revcom,
slice, translation, selection. By default, B<bioseq> will assume
that both the input and the output are in FASTA format.

=head1 OPTIONS

=over 4

=item B<--help, -h>

Print a brief help message and exits.

=item B<--man, -m>

Prints the manual page and exits.

=item B<--input, -i> 'format'

Input file format. By default, this is 'fasta'.

=item B<--output, -o> 'format'

Output file format. By default, this is 'fasta'.

=item B<--noseq, -n>

Print number of sequences.

=item B<--sub, -s> 'min,max'

Substring (of 1st sequence), e.g., -s'20,80' or --sub'20,80' or -s='20,80' or --sub='20,80'

=item B<--lengths, -l>

Print sequence lengths.

=item B<--pick, -p> 'tag:value'

 Pick a sequence or a comma-separated list of sequences, eg,
 --pick 'id:foo'        by id
 --pick 'order:2'       by order
 --pick 'id:foo,bar'    list by id
 --pick 'order:2,3'     list by order
 --pick 'order:2-10'    list by range
 --pick 're:REGEX'      using a regular expression (only one regex is expected)

=item B<--del, -d> 'tag:value'

 Delete a sequence or a comma-separated list of sequences, eg,
 --del 'id:foo'		by id
 --del 'order:2'	by order
 --del 'length:n'	by min length, where 'n' is length
 --del 'ambig:x'	by min % ambiguous base/aa, where 'x' is the %
 --del 'id:foo,bar'	list by id
 --del 're:REGEX'   using a regular expression (only one regex is expected)

=item B<--revcom, -r>

Reverse complement

=item B<--translate, -t> [1|3|6]

Translate in 1, 3, or 6 frames. eg, -t1, -t3, or -t6.

=item B<--shred, -c>

Shred into individual sequences

=item B<--linearize, -L>

Linearize FASTA.

=item B<--extract, -e>

Extract in-frame sequences.

=item B<--nogaps, -g>

Remove gaps

=item B<--longest-orf, -C>

Output the frame that gives the longest ORF.

=item B<--anonymize, -a> 'n'

Replace with serial IDs 'n' characters long, including a leading 'S' (e.g., -a'5' gives S0001).
Produces a sed script file with a '.sed' suffix that may be used with sed's '-f' argument.
If the filename is '-', the sed file is named STDOUT.sed instead.
The sed filename is specified on STDERR.

=item B<--prefix> 'PREFIX'

Used in conjunction with --anonymize. This lets you specify a custom prefix for
the anonymized sequence IDs given when using the --anonymize option. If this is
given, then the whole prefix will count toward the total ID length. For example:
suppose the prefix chosen is SEQ, and that for --anonymize you supplied 5. Then
the maximum id length is 5, so there is room for only two more digits. e.g.,
 SEQ01   atg...
 SEQ02   atg...
 SEQ03   atc...

If there are enough sequences that the length of the prefix plus the length of
the digit portion exceeds the length given to --anonymize, a warning will be
given:
 aln-manipulations.pl -a 4 --prefix=SEQ
 # output
 SEQ1    atg...
 ...
 SEQ10   atc...
 
 # more output
 WARNING: Anonymized ID length exceeded requested length: try a different length or prefix.

=item B<--composition, -w>

Base or AA composition.

=back

=head1 EXAMPLES

Section under construction...

=head1 REQUIRES

Perl 5.010, BioPerl

=head1 SEE ALSO

  perl(1)

=head1 AUTHORS

 Weigang Qiu at genectr.hunter.cuny.edu
 Yözen Hernández yzhernand at gmail dot com
 Levy Vargas levy dot vargas at gmail dot com

=cut

##################### End ##########################
